/* tslint:disable */
/* eslint-disable */
/**
 * Mcafe V2 API
 * Mcafe V2 API 명세서
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { MemberRequestLogin } from '../models';
// @ts-ignore
import { MemberRequestSignup } from '../models';
// @ts-ignore
import { MemberRequestUcehfAuth } from '../models';
// @ts-ignore
import { MemberResponseCertKey } from '../models';
// @ts-ignore
import { MemberResponseLogin } from '../models';
// @ts-ignore
import { MemberResponseResult } from '../models';
// @ts-ignore
import { MemberResponseUsernameCheck } from '../models';
/**
 * MemberControllerApi - axios parameter creator
 * @export
 */
export const MemberControllerApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 로그인
     * @param {MemberRequestLogin} memberRequestLogin
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login: async (memberRequestLogin: MemberRequestLogin, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'memberRequestLogin' is not null or undefined
      assertParamExists('login', 'memberRequestLogin', memberRequestLogin);
      const localVarPath = `/member/login`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(memberRequestLogin, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 회원가입
     * @param {MemberRequestSignup} memberRequestSignup
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signup: async (memberRequestSignup: MemberRequestSignup, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'memberRequestSignup' is not null or undefined
      assertParamExists('signup', 'memberRequestSignup', memberRequestSignup);
      const localVarPath = `/member/signup`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(memberRequestSignup, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary uchef 인증
     * @param {MemberRequestUcehfAuth} memberRequestUcehfAuth
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uChefAuth: async (memberRequestUcehfAuth: MemberRequestUcehfAuth, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'memberRequestUcehfAuth' is not null or undefined
      assertParamExists('uChefAuth', 'memberRequestUcehfAuth', memberRequestUcehfAuth);
      const localVarPath = `/member/uchef-auth`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(memberRequestUcehfAuth, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary username 중복검사
     * @param {string} username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usernameCheck: async (username: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'username' is not null or undefined
      assertParamExists('usernameCheck', 'username', username);
      const localVarPath = `/member/id-check/{username}`.replace(`{${'username'}}`, encodeURIComponent(String(username)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * MemberControllerApi - functional programming interface
 * @export
 */
export const MemberControllerApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = MemberControllerApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 로그인
     * @param {MemberRequestLogin} memberRequestLogin
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async login(
      memberRequestLogin: MemberRequestLogin,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberResponseLogin>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.login(memberRequestLogin, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 회원가입
     * @param {MemberRequestSignup} memberRequestSignup
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async signup(
      memberRequestSignup: MemberRequestSignup,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberResponseResult>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.signup(memberRequestSignup, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary uchef 인증
     * @param {MemberRequestUcehfAuth} memberRequestUcehfAuth
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async uChefAuth(
      memberRequestUcehfAuth: MemberRequestUcehfAuth,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberResponseCertKey>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.uChefAuth(memberRequestUcehfAuth, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary username 중복검사
     * @param {string} username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usernameCheck(
      username: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberResponseUsernameCheck>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usernameCheck(username, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * MemberControllerApi - factory interface
 * @export
 */
export const MemberControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = MemberControllerApiFp(configuration);
  return {
    /**
     *
     * @summary 로그인
     * @param {MemberRequestLogin} memberRequestLogin
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login(memberRequestLogin: MemberRequestLogin, options?: any): AxiosPromise<MemberResponseLogin> {
      return localVarFp.login(memberRequestLogin, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 회원가입
     * @param {MemberRequestSignup} memberRequestSignup
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signup(memberRequestSignup: MemberRequestSignup, options?: any): AxiosPromise<MemberResponseResult> {
      return localVarFp.signup(memberRequestSignup, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary uchef 인증
     * @param {MemberRequestUcehfAuth} memberRequestUcehfAuth
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uChefAuth(memberRequestUcehfAuth: MemberRequestUcehfAuth, options?: any): AxiosPromise<MemberResponseCertKey> {
      return localVarFp.uChefAuth(memberRequestUcehfAuth, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary username 중복검사
     * @param {string} username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usernameCheck(username: string, options?: any): AxiosPromise<MemberResponseUsernameCheck> {
      return localVarFp.usernameCheck(username, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * MemberControllerApi - object-oriented interface
 * @export
 * @class MemberControllerApi
 * @extends {BaseAPI}
 */
export class MemberControllerApi extends BaseAPI {
  /**
   *
   * @summary 로그인
   * @param {MemberRequestLogin} memberRequestLogin
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MemberControllerApi
   */
  public login(memberRequestLogin: MemberRequestLogin, options?: AxiosRequestConfig) {
    return MemberControllerApiFp(this.configuration)
      .login(memberRequestLogin, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 회원가입
   * @param {MemberRequestSignup} memberRequestSignup
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MemberControllerApi
   */
  public signup(memberRequestSignup: MemberRequestSignup, options?: AxiosRequestConfig) {
    return MemberControllerApiFp(this.configuration)
      .signup(memberRequestSignup, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary uchef 인증
   * @param {MemberRequestUcehfAuth} memberRequestUcehfAuth
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MemberControllerApi
   */
  public uChefAuth(memberRequestUcehfAuth: MemberRequestUcehfAuth, options?: AxiosRequestConfig) {
    return MemberControllerApiFp(this.configuration)
      .uChefAuth(memberRequestUcehfAuth, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary username 중복검사
   * @param {string} username
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MemberControllerApi
   */
  public usernameCheck(username: string, options?: AxiosRequestConfig) {
    return MemberControllerApiFp(this.configuration)
      .usernameCheck(username, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
