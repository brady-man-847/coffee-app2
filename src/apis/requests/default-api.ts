/* tslint:disable */
/* eslint-disable */
/**
 * Mcafe V2 API
 * Mcafe V2 API 명세서
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { OrderGetMenuInfo } from '../models';
// @ts-ignore
import { OrderGetMenuList } from '../models';
// @ts-ignore
import { OrderRequestCreate } from '../models';
// @ts-ignore
import { OrderResponseCreate } from '../models';
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * 주문을 생성합니다.
     * @summary 주문 생성
     * @param {OrderRequestCreate} orderRequestCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrder: async (orderRequestCreate: OrderRequestCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'orderRequestCreate' is not null or undefined
      assertParamExists('createOrder', 'orderRequestCreate', orderRequestCreate);
      const localVarPath = `/order`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(orderRequestCreate, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 메뉴 목록을 조회합니다.
     * @summary 메뉴 목록 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMenuList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/menu`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 메뉴 목록을 조회합니다.
     * @summary 메뉴 목록 조회
     * @param {number} menuCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMenuList1: async (menuCode: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'menuCode' is not null or undefined
      assertParamExists('getMenuList1', 'menuCode', menuCode);
      const localVarPath = `/menu/{menuCode}`.replace(`{${'menuCode'}}`, encodeURIComponent(String(menuCode)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 테스트
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    test: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/test`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary u chef 로그인 테스트
     * @param {string} phone
     * @param {string} securityId
     * @param {string} password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uChefLoginTest: async (phone: string, securityId: string, password: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'phone' is not null or undefined
      assertParamExists('uChefLoginTest', 'phone', phone);
      // verify required parameter 'securityId' is not null or undefined
      assertParamExists('uChefLoginTest', 'securityId', securityId);
      // verify required parameter 'password' is not null or undefined
      assertParamExists('uChefLoginTest', 'password', password);
      const localVarPath = `/test/uchef/login`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      if (phone !== undefined) {
        localVarQueryParameter['phone'] = phone;
      }

      if (securityId !== undefined) {
        localVarQueryParameter['securityId'] = securityId;
      }

      if (password !== undefined) {
        localVarQueryParameter['password'] = password;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration);
  return {
    /**
     * 주문을 생성합니다.
     * @summary 주문 생성
     * @param {OrderRequestCreate} orderRequestCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createOrder(
      orderRequestCreate: OrderRequestCreate,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderResponseCreate>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createOrder(orderRequestCreate, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * 메뉴 목록을 조회합니다.
     * @summary 메뉴 목록 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMenuList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderGetMenuList>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getMenuList(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * 메뉴 목록을 조회합니다.
     * @summary 메뉴 목록 조회
     * @param {number} menuCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMenuList1(
      menuCode: number,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderGetMenuInfo>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getMenuList1(menuCode, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 테스트
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async test(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.test(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary u chef 로그인 테스트
     * @param {string} phone
     * @param {string} securityId
     * @param {string} password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async uChefLoginTest(
      phone: string,
      securityId: string,
      password: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.uChefLoginTest(phone, securityId, password, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = DefaultApiFp(configuration);
  return {
    /**
     * 주문을 생성합니다.
     * @summary 주문 생성
     * @param {OrderRequestCreate} orderRequestCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrder(orderRequestCreate: OrderRequestCreate, options?: any): AxiosPromise<OrderResponseCreate> {
      return localVarFp.createOrder(orderRequestCreate, options).then((request) => request(axios, basePath));
    },
    /**
     * 메뉴 목록을 조회합니다.
     * @summary 메뉴 목록 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMenuList(options?: any): AxiosPromise<OrderGetMenuList> {
      return localVarFp.getMenuList(options).then((request) => request(axios, basePath));
    },
    /**
     * 메뉴 목록을 조회합니다.
     * @summary 메뉴 목록 조회
     * @param {number} menuCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMenuList1(menuCode: number, options?: any): AxiosPromise<OrderGetMenuInfo> {
      return localVarFp.getMenuList1(menuCode, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 테스트
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    test(options?: any): AxiosPromise<string> {
      return localVarFp.test(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary u chef 로그인 테스트
     * @param {string} phone
     * @param {string} securityId
     * @param {string} password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uChefLoginTest(phone: string, securityId: string, password: string, options?: any): AxiosPromise<string> {
      return localVarFp.uChefLoginTest(phone, securityId, password, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
   * 주문을 생성합니다.
   * @summary 주문 생성
   * @param {OrderRequestCreate} orderRequestCreate
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public createOrder(orderRequestCreate: OrderRequestCreate, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .createOrder(orderRequestCreate, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 메뉴 목록을 조회합니다.
   * @summary 메뉴 목록 조회
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getMenuList(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .getMenuList(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 메뉴 목록을 조회합니다.
   * @summary 메뉴 목록 조회
   * @param {number} menuCode
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getMenuList1(menuCode: number, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .getMenuList1(menuCode, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 테스트
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public test(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .test(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary u chef 로그인 테스트
   * @param {string} phone
   * @param {string} securityId
   * @param {string} password
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public uChefLoginTest(phone: string, securityId: string, password: string, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .uChefLoginTest(phone, securityId, password, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
