/* tslint:disable */
/* eslint-disable */
/**
 * Mcafe V2 API
 * Mcafe V2 API 명세서
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DashBoardRequestPost } from '../models';
// @ts-ignore
import { ErrorMessage } from '../models';
// @ts-ignore
import { FavoriteMenuRequestCreate } from '../models';
// @ts-ignore
import { FavoriteMenuResponseResult } from '../models';
// @ts-ignore
import { FavoriteMenuResponseResults } from '../models';
// @ts-ignore
import { LooserHistoryResponseResults } from '../models';
// @ts-ignore
import { MemberRequestLogin } from '../models';
// @ts-ignore
import { MemberRequestNickname } from '../models';
// @ts-ignore
import { MemberRequestPassword } from '../models';
// @ts-ignore
import { MemberRequestSignup } from '../models';
// @ts-ignore
import { MemberRequestUcehfAuth } from '../models';
// @ts-ignore
import { MemberResponseCertKey } from '../models';
// @ts-ignore
import { MemberResponseLogin } from '../models';
// @ts-ignore
import { MemberResponseResult } from '../models';
// @ts-ignore
import { MemberResponseUsernameCheck } from '../models';
// @ts-ignore
import { OrderGetMenuInfo } from '../models';
// @ts-ignore
import { OrderGetMenuList } from '../models';
// @ts-ignore
import { OrderRequestCreate } from '../models';
// @ts-ignore
import { OrderRequestUpdateQuantity } from '../models';
// @ts-ignore
import { OrderResponseCreate } from '../models';
// @ts-ignore
import { OrderResponsePay } from '../models';
// @ts-ignore
import { PaymentRequestPay } from '../models';
// @ts-ignore
import { RoomRequestCreate } from '../models';
// @ts-ignore
import { RoomRequestEnterRoom } from '../models';
// @ts-ignore
import { RoomRequestUpdateRoom } from '../models';
// @ts-ignore
import { RoomResponseCreate } from '../models';
// @ts-ignore
import { RoomResponseGetRoomInfo } from '../models';
// @ts-ignore
import { RoomResponseGetRoomList } from '../models';
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 즐겨찾기 메뉴 추가
     * @param {FavoriteMenuRequestCreate} favoriteMenuRequestCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFavoriteMenu: async (
      favoriteMenuRequestCreate: FavoriteMenuRequestCreate,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'favoriteMenuRequestCreate' is not null or undefined
      assertParamExists('createFavoriteMenu', 'favoriteMenuRequestCreate', favoriteMenuRequestCreate);
      const localVarPath = `/favorite`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(favoriteMenuRequestCreate, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 주문을 생성합니다.
     * @summary 주문 생성
     * @param {OrderRequestCreate} orderRequestCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrder: async (orderRequestCreate: OrderRequestCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'orderRequestCreate' is not null or undefined
      assertParamExists('createOrder', 'orderRequestCreate', orderRequestCreate);
      const localVarPath = `/order`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(orderRequestCreate, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 방 생성
     * @param {RoomRequestCreate} roomRequestCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRoom: async (roomRequestCreate: RoomRequestCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'roomRequestCreate' is not null or undefined
      assertParamExists('createRoom', 'roomRequestCreate', roomRequestCreate);
      const localVarPath = `/room`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(roomRequestCreate, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 즐겨찾기 메뉴 삭제
     * @param {number} favoriteSn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFavoriteMenu: async (favoriteSn: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'favoriteSn' is not null or undefined
      assertParamExists('deleteFavoriteMenu', 'favoriteSn', favoriteSn);
      const localVarPath = `/favorite/{favoriteSn}`.replace(`{${'favoriteSn'}}`, encodeURIComponent(String(favoriteSn)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 회원 탈퇴
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMember: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/member`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 주문을 삭제합니다.
     * @summary 주문 삭제
     * @param {number} roomSn
     * @param {number} orderSn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrder: async (roomSn: number, orderSn: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'roomSn' is not null or undefined
      assertParamExists('deleteOrder', 'roomSn', roomSn);
      // verify required parameter 'orderSn' is not null or undefined
      assertParamExists('deleteOrder', 'orderSn', orderSn);
      const localVarPath = `/order/{orderSn}`.replace(`{${'orderSn'}}`, encodeURIComponent(String(orderSn)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      if (roomSn !== undefined) {
        localVarQueryParameter['roomSn'] = roomSn;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 방 삭제
     * @param {number} roomSn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRoom: async (roomSn: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'roomSn' is not null or undefined
      assertParamExists('deleteRoom', 'roomSn', roomSn);
      const localVarPath = `/room/{roomSn}`.replace(`{${'roomSn'}}`, encodeURIComponent(String(roomSn)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 방 입장
     * @param {number} roomSn
     * @param {RoomRequestEnterRoom} roomRequestEnterRoom
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    enterRoom: async (
      roomSn: number,
      roomRequestEnterRoom: RoomRequestEnterRoom,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'roomSn' is not null or undefined
      assertParamExists('enterRoom', 'roomSn', roomSn);
      // verify required parameter 'roomRequestEnterRoom' is not null or undefined
      assertParamExists('enterRoom', 'roomRequestEnterRoom', roomRequestEnterRoom);
      const localVarPath = `/room/enter/{roomSn}`.replace(`{${'roomSn'}}`, encodeURIComponent(String(roomSn)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(roomRequestEnterRoom, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 방 나가기
     * @param {number} roomSn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exitRoom: async (roomSn: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'roomSn' is not null or undefined
      assertParamExists('exitRoom', 'roomSn', roomSn);
      const localVarPath = `/room/exit/{roomSn}`.replace(`{${'roomSn'}}`, encodeURIComponent(String(roomSn)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 즐겨찾기 메뉴 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findFavoriteMenu: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/favorite`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 회원정보 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findMemberInfo: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/member`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 입장한 방 목록 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEnteredRoomList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/room/entered`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 패배자 조회
     * @param {Array<number>} memberSns
     * @param {'PINBALL'} gameType
     * @param {string} startDate
     * @param {string} endDate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLooserData: async (
      memberSns: Array<number>,
      gameType: 'PINBALL',
      startDate: string,
      endDate: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'memberSns' is not null or undefined
      assertParamExists('getLooserData', 'memberSns', memberSns);
      // verify required parameter 'gameType' is not null or undefined
      assertParamExists('getLooserData', 'gameType', gameType);
      // verify required parameter 'startDate' is not null or undefined
      assertParamExists('getLooserData', 'startDate', startDate);
      // verify required parameter 'endDate' is not null or undefined
      assertParamExists('getLooserData', 'endDate', endDate);
      const localVarPath = `/dashboard/looser`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      if (memberSns) {
        localVarQueryParameter['memberSns'] = memberSns;
      }

      if (gameType !== undefined) {
        localVarQueryParameter['gameType'] = gameType;
      }

      if (startDate !== undefined) {
        localVarQueryParameter['startDate'] = (startDate as any) instanceof Date ? (startDate as any).toISOString() : startDate;
      }

      if (endDate !== undefined) {
        localVarQueryParameter['endDate'] = (endDate as any) instanceof Date ? (endDate as any).toISOString() : endDate;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 메뉴 정보를 조회합니다.
     * @summary 메뉴 정보 조회
     * @param {string} menuCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMenuInfo: async (menuCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'menuCode' is not null or undefined
      assertParamExists('getMenuInfo', 'menuCode', menuCode);
      const localVarPath = `/order/menu/{menuCode}`.replace(`{${'menuCode'}}`, encodeURIComponent(String(menuCode)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 메뉴 목록을 조회합니다.
     * @summary 메뉴 목록 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMenuList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/order/menu`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 방 정보 조회
     * @param {number} roomSn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRoomInfo: async (roomSn: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'roomSn' is not null or undefined
      assertParamExists('getRoomInfo', 'roomSn', roomSn);
      const localVarPath = `/room/{roomSn}`.replace(`{${'roomSn'}}`, encodeURIComponent(String(roomSn)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 방 목록 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRoomList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/room`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 로그인
     * @param {MemberRequestLogin} memberRequestLogin
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login: async (memberRequestLogin: MemberRequestLogin, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'memberRequestLogin' is not null or undefined
      assertParamExists('login', 'memberRequestLogin', memberRequestLogin);
      const localVarPath = `/member/login`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(memberRequestLogin, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 주문을 취합하여 음료를 주문합니다.
     * @summary 음료 주문
     * @param {PaymentRequestPay} paymentRequestPay
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    payOrder: async (paymentRequestPay: PaymentRequestPay, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'paymentRequestPay' is not null or undefined
      assertParamExists('payOrder', 'paymentRequestPay', paymentRequestPay);
      const localVarPath = `/payment`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(paymentRequestPay, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 패배자 등록
     * @param {DashBoardRequestPost} dashBoardRequestPost
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postLooser: async (dashBoardRequestPost: DashBoardRequestPost, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'dashBoardRequestPost' is not null or undefined
      assertParamExists('postLooser', 'dashBoardRequestPost', dashBoardRequestPost);
      const localVarPath = `/dashboard/looser`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(dashBoardRequestPost, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 회원가입
     * @param {MemberRequestSignup} memberRequestSignup
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signup: async (memberRequestSignup: MemberRequestSignup, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'memberRequestSignup' is not null or undefined
      assertParamExists('signup', 'memberRequestSignup', memberRequestSignup);
      const localVarPath = `/member/signup`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(memberRequestSignup, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 테스트
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    test: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/test`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary uchef 인증
     * @param {MemberRequestUcehfAuth} memberRequestUcehfAuth
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uChefAuth: async (memberRequestUcehfAuth: MemberRequestUcehfAuth, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'memberRequestUcehfAuth' is not null or undefined
      assertParamExists('uChefAuth', 'memberRequestUcehfAuth', memberRequestUcehfAuth);
      const localVarPath = `/member/uchef-auth`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(memberRequestUcehfAuth, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary u chef 로그인 테스트
     * @param {string} phone
     * @param {string} securityId
     * @param {string} password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uChefLoginTest: async (phone: string, securityId: string, password: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'phone' is not null or undefined
      assertParamExists('uChefLoginTest', 'phone', phone);
      // verify required parameter 'securityId' is not null or undefined
      assertParamExists('uChefLoginTest', 'securityId', securityId);
      // verify required parameter 'password' is not null or undefined
      assertParamExists('uChefLoginTest', 'password', password);
      const localVarPath = `/test/uchef/login`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      if (phone !== undefined) {
        localVarQueryParameter['phone'] = phone;
      }

      if (securityId !== undefined) {
        localVarQueryParameter['securityId'] = securityId;
      }

      if (password !== undefined) {
        localVarQueryParameter['password'] = password;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 닉네임 변경
     * @param {MemberRequestNickname} memberRequestNickname
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateNickname: async (memberRequestNickname: MemberRequestNickname, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'memberRequestNickname' is not null or undefined
      assertParamExists('updateNickname', 'memberRequestNickname', memberRequestNickname);
      const localVarPath = `/member/nickname`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(memberRequestNickname, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 주문 수량을 변경합니다.
     * @summary 주문 수량 변경
     * @param {number} orderSn
     * @param {OrderRequestUpdateQuantity} orderRequestUpdateQuantity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrderQuantity: async (
      orderSn: number,
      orderRequestUpdateQuantity: OrderRequestUpdateQuantity,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'orderSn' is not null or undefined
      assertParamExists('updateOrderQuantity', 'orderSn', orderSn);
      // verify required parameter 'orderRequestUpdateQuantity' is not null or undefined
      assertParamExists('updateOrderQuantity', 'orderRequestUpdateQuantity', orderRequestUpdateQuantity);
      const localVarPath = `/order/{orderSn}`.replace(`{${'orderSn'}}`, encodeURIComponent(String(orderSn)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(orderRequestUpdateQuantity, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 비밀번호 변경
     * @param {MemberRequestPassword} memberRequestPassword
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePassword: async (memberRequestPassword: MemberRequestPassword, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'memberRequestPassword' is not null or undefined
      assertParamExists('updatePassword', 'memberRequestPassword', memberRequestPassword);
      const localVarPath = `/member/password`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(memberRequestPassword, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 방 정보 수정
     * @param {RoomRequestUpdateRoom} roomRequestUpdateRoom
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRoom: async (roomRequestUpdateRoom: RoomRequestUpdateRoom, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'roomRequestUpdateRoom' is not null or undefined
      assertParamExists('updateRoom', 'roomRequestUpdateRoom', roomRequestUpdateRoom);
      const localVarPath = `/room`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(roomRequestUpdateRoom, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary username 중복검사
     * @param {string} username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usernameCheck: async (username: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'username' is not null or undefined
      assertParamExists('usernameCheck', 'username', username);
      const localVarPath = `/member/id-check/{username}`.replace(`{${'username'}}`, encodeURIComponent(String(username)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 즐겨찾기 메뉴 추가
     * @param {FavoriteMenuRequestCreate} favoriteMenuRequestCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createFavoriteMenu(
      favoriteMenuRequestCreate: FavoriteMenuRequestCreate,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FavoriteMenuResponseResult>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createFavoriteMenu(favoriteMenuRequestCreate, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * 주문을 생성합니다.
     * @summary 주문 생성
     * @param {OrderRequestCreate} orderRequestCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createOrder(
      orderRequestCreate: OrderRequestCreate,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderResponseCreate>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createOrder(orderRequestCreate, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 방 생성
     * @param {RoomRequestCreate} roomRequestCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createRoom(
      roomRequestCreate: RoomRequestCreate,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoomResponseCreate>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createRoom(roomRequestCreate, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 즐겨찾기 메뉴 삭제
     * @param {number} favoriteSn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteFavoriteMenu(
      favoriteSn: number,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFavoriteMenu(favoriteSn, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 회원 탈퇴
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteMember(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMember(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * 주문을 삭제합니다.
     * @summary 주문 삭제
     * @param {number} roomSn
     * @param {number} orderSn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteOrder(
      roomSn: number,
      orderSn: number,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOrder(roomSn, orderSn, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 방 삭제
     * @param {number} roomSn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteRoom(
      roomSn: number,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRoom(roomSn, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 방 입장
     * @param {number} roomSn
     * @param {RoomRequestEnterRoom} roomRequestEnterRoom
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async enterRoom(
      roomSn: number,
      roomRequestEnterRoom: RoomRequestEnterRoom,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.enterRoom(roomSn, roomRequestEnterRoom, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 방 나가기
     * @param {number} roomSn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async exitRoom(
      roomSn: number,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.exitRoom(roomSn, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 즐겨찾기 메뉴 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async findFavoriteMenu(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FavoriteMenuResponseResults>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.findFavoriteMenu(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 회원정보 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async findMemberInfo(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberResponseResult>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.findMemberInfo(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 입장한 방 목록 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getEnteredRoomList(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoomResponseGetRoomList>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getEnteredRoomList(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 패배자 조회
     * @param {Array<number>} memberSns
     * @param {'PINBALL'} gameType
     * @param {string} startDate
     * @param {string} endDate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getLooserData(
      memberSns: Array<number>,
      gameType: 'PINBALL',
      startDate: string,
      endDate: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LooserHistoryResponseResults>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getLooserData(memberSns, gameType, startDate, endDate, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * 메뉴 정보를 조회합니다.
     * @summary 메뉴 정보 조회
     * @param {string} menuCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMenuInfo(
      menuCode: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderGetMenuInfo>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getMenuInfo(menuCode, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * 메뉴 목록을 조회합니다.
     * @summary 메뉴 목록 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMenuList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderGetMenuList>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getMenuList(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 방 정보 조회
     * @param {number} roomSn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getRoomInfo(
      roomSn: number,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoomResponseGetRoomInfo>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getRoomInfo(roomSn, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 방 목록 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getRoomList(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoomResponseGetRoomList>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getRoomList(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 로그인
     * @param {MemberRequestLogin} memberRequestLogin
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async login(
      memberRequestLogin: MemberRequestLogin,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberResponseLogin>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.login(memberRequestLogin, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * 주문을 취합하여 음료를 주문합니다.
     * @summary 음료 주문
     * @param {PaymentRequestPay} paymentRequestPay
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async payOrder(
      paymentRequestPay: PaymentRequestPay,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderResponsePay>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.payOrder(paymentRequestPay, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 패배자 등록
     * @param {DashBoardRequestPost} dashBoardRequestPost
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postLooser(
      dashBoardRequestPost: DashBoardRequestPost,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.postLooser(dashBoardRequestPost, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 회원가입
     * @param {MemberRequestSignup} memberRequestSignup
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async signup(
      memberRequestSignup: MemberRequestSignup,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberResponseResult>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.signup(memberRequestSignup, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 테스트
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async test(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.test(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary uchef 인증
     * @param {MemberRequestUcehfAuth} memberRequestUcehfAuth
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async uChefAuth(
      memberRequestUcehfAuth: MemberRequestUcehfAuth,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberResponseCertKey>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.uChefAuth(memberRequestUcehfAuth, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary u chef 로그인 테스트
     * @param {string} phone
     * @param {string} securityId
     * @param {string} password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async uChefLoginTest(
      phone: string,
      securityId: string,
      password: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.uChefLoginTest(phone, securityId, password, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 닉네임 변경
     * @param {MemberRequestNickname} memberRequestNickname
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateNickname(
      memberRequestNickname: MemberRequestNickname,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberResponseResult>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateNickname(memberRequestNickname, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * 주문 수량을 변경합니다.
     * @summary 주문 수량 변경
     * @param {number} orderSn
     * @param {OrderRequestUpdateQuantity} orderRequestUpdateQuantity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateOrderQuantity(
      orderSn: number,
      orderRequestUpdateQuantity: OrderRequestUpdateQuantity,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateOrderQuantity(orderSn, orderRequestUpdateQuantity, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 비밀번호 변경
     * @param {MemberRequestPassword} memberRequestPassword
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updatePassword(
      memberRequestPassword: MemberRequestPassword,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberResponseResult>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updatePassword(memberRequestPassword, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 방 정보 수정
     * @param {RoomRequestUpdateRoom} roomRequestUpdateRoom
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateRoom(
      roomRequestUpdateRoom: RoomRequestUpdateRoom,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateRoom(roomRequestUpdateRoom, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary username 중복검사
     * @param {string} username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usernameCheck(
      username: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberResponseUsernameCheck>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usernameCheck(username, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = DefaultApiFp(configuration);
  return {
    /**
     *
     * @summary 즐겨찾기 메뉴 추가
     * @param {FavoriteMenuRequestCreate} favoriteMenuRequestCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFavoriteMenu(favoriteMenuRequestCreate: FavoriteMenuRequestCreate, options?: any): AxiosPromise<FavoriteMenuResponseResult> {
      return localVarFp.createFavoriteMenu(favoriteMenuRequestCreate, options).then((request) => request(axios, basePath));
    },
    /**
     * 주문을 생성합니다.
     * @summary 주문 생성
     * @param {OrderRequestCreate} orderRequestCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrder(orderRequestCreate: OrderRequestCreate, options?: any): AxiosPromise<OrderResponseCreate> {
      return localVarFp.createOrder(orderRequestCreate, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 방 생성
     * @param {RoomRequestCreate} roomRequestCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRoom(roomRequestCreate: RoomRequestCreate, options?: any): AxiosPromise<RoomResponseCreate> {
      return localVarFp.createRoom(roomRequestCreate, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 즐겨찾기 메뉴 삭제
     * @param {number} favoriteSn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFavoriteMenu(favoriteSn: number, options?: any): AxiosPromise<void> {
      return localVarFp.deleteFavoriteMenu(favoriteSn, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 회원 탈퇴
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMember(options?: any): AxiosPromise<void> {
      return localVarFp.deleteMember(options).then((request) => request(axios, basePath));
    },
    /**
     * 주문을 삭제합니다.
     * @summary 주문 삭제
     * @param {number} roomSn
     * @param {number} orderSn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrder(roomSn: number, orderSn: number, options?: any): AxiosPromise<boolean> {
      return localVarFp.deleteOrder(roomSn, orderSn, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 방 삭제
     * @param {number} roomSn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRoom(roomSn: number, options?: any): AxiosPromise<boolean> {
      return localVarFp.deleteRoom(roomSn, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 방 입장
     * @param {number} roomSn
     * @param {RoomRequestEnterRoom} roomRequestEnterRoom
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    enterRoom(roomSn: number, roomRequestEnterRoom: RoomRequestEnterRoom, options?: any): AxiosPromise<boolean> {
      return localVarFp.enterRoom(roomSn, roomRequestEnterRoom, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 방 나가기
     * @param {number} roomSn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exitRoom(roomSn: number, options?: any): AxiosPromise<boolean> {
      return localVarFp.exitRoom(roomSn, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 즐겨찾기 메뉴 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findFavoriteMenu(options?: any): AxiosPromise<FavoriteMenuResponseResults> {
      return localVarFp.findFavoriteMenu(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 회원정보 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findMemberInfo(options?: any): AxiosPromise<MemberResponseResult> {
      return localVarFp.findMemberInfo(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 입장한 방 목록 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEnteredRoomList(options?: any): AxiosPromise<RoomResponseGetRoomList> {
      return localVarFp.getEnteredRoomList(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 패배자 조회
     * @param {Array<number>} memberSns
     * @param {'PINBALL'} gameType
     * @param {string} startDate
     * @param {string} endDate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLooserData(
      memberSns: Array<number>,
      gameType: 'PINBALL',
      startDate: string,
      endDate: string,
      options?: any,
    ): AxiosPromise<LooserHistoryResponseResults> {
      return localVarFp.getLooserData(memberSns, gameType, startDate, endDate, options).then((request) => request(axios, basePath));
    },
    /**
     * 메뉴 정보를 조회합니다.
     * @summary 메뉴 정보 조회
     * @param {string} menuCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMenuInfo(menuCode: string, options?: any): AxiosPromise<OrderGetMenuInfo> {
      return localVarFp.getMenuInfo(menuCode, options).then((request) => request(axios, basePath));
    },
    /**
     * 메뉴 목록을 조회합니다.
     * @summary 메뉴 목록 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMenuList(options?: any): AxiosPromise<OrderGetMenuList> {
      return localVarFp.getMenuList(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 방 정보 조회
     * @param {number} roomSn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRoomInfo(roomSn: number, options?: any): AxiosPromise<RoomResponseGetRoomInfo> {
      return localVarFp.getRoomInfo(roomSn, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 방 목록 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRoomList(options?: any): AxiosPromise<RoomResponseGetRoomList> {
      return localVarFp.getRoomList(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 로그인
     * @param {MemberRequestLogin} memberRequestLogin
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login(memberRequestLogin: MemberRequestLogin, options?: any): AxiosPromise<MemberResponseLogin> {
      return localVarFp.login(memberRequestLogin, options).then((request) => request(axios, basePath));
    },
    /**
     * 주문을 취합하여 음료를 주문합니다.
     * @summary 음료 주문
     * @param {PaymentRequestPay} paymentRequestPay
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    payOrder(paymentRequestPay: PaymentRequestPay, options?: any): AxiosPromise<OrderResponsePay> {
      return localVarFp.payOrder(paymentRequestPay, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 패배자 등록
     * @param {DashBoardRequestPost} dashBoardRequestPost
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postLooser(dashBoardRequestPost: DashBoardRequestPost, options?: any): AxiosPromise<void> {
      return localVarFp.postLooser(dashBoardRequestPost, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 회원가입
     * @param {MemberRequestSignup} memberRequestSignup
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signup(memberRequestSignup: MemberRequestSignup, options?: any): AxiosPromise<MemberResponseResult> {
      return localVarFp.signup(memberRequestSignup, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 테스트
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    test(options?: any): AxiosPromise<string> {
      return localVarFp.test(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary uchef 인증
     * @param {MemberRequestUcehfAuth} memberRequestUcehfAuth
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uChefAuth(memberRequestUcehfAuth: MemberRequestUcehfAuth, options?: any): AxiosPromise<MemberResponseCertKey> {
      return localVarFp.uChefAuth(memberRequestUcehfAuth, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary u chef 로그인 테스트
     * @param {string} phone
     * @param {string} securityId
     * @param {string} password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uChefLoginTest(phone: string, securityId: string, password: string, options?: any): AxiosPromise<string> {
      return localVarFp.uChefLoginTest(phone, securityId, password, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 닉네임 변경
     * @param {MemberRequestNickname} memberRequestNickname
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateNickname(memberRequestNickname: MemberRequestNickname, options?: any): AxiosPromise<MemberResponseResult> {
      return localVarFp.updateNickname(memberRequestNickname, options).then((request) => request(axios, basePath));
    },
    /**
     * 주문 수량을 변경합니다.
     * @summary 주문 수량 변경
     * @param {number} orderSn
     * @param {OrderRequestUpdateQuantity} orderRequestUpdateQuantity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrderQuantity(orderSn: number, orderRequestUpdateQuantity: OrderRequestUpdateQuantity, options?: any): AxiosPromise<boolean> {
      return localVarFp.updateOrderQuantity(orderSn, orderRequestUpdateQuantity, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 비밀번호 변경
     * @param {MemberRequestPassword} memberRequestPassword
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePassword(memberRequestPassword: MemberRequestPassword, options?: any): AxiosPromise<MemberResponseResult> {
      return localVarFp.updatePassword(memberRequestPassword, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 방 정보 수정
     * @param {RoomRequestUpdateRoom} roomRequestUpdateRoom
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRoom(roomRequestUpdateRoom: RoomRequestUpdateRoom, options?: any): AxiosPromise<boolean> {
      return localVarFp.updateRoom(roomRequestUpdateRoom, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary username 중복검사
     * @param {string} username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usernameCheck(username: string, options?: any): AxiosPromise<MemberResponseUsernameCheck> {
      return localVarFp.usernameCheck(username, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
   *
   * @summary 즐겨찾기 메뉴 추가
   * @param {FavoriteMenuRequestCreate} favoriteMenuRequestCreate
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public createFavoriteMenu(favoriteMenuRequestCreate: FavoriteMenuRequestCreate, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .createFavoriteMenu(favoriteMenuRequestCreate, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 주문을 생성합니다.
   * @summary 주문 생성
   * @param {OrderRequestCreate} orderRequestCreate
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public createOrder(orderRequestCreate: OrderRequestCreate, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .createOrder(orderRequestCreate, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 방 생성
   * @param {RoomRequestCreate} roomRequestCreate
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public createRoom(roomRequestCreate: RoomRequestCreate, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .createRoom(roomRequestCreate, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 즐겨찾기 메뉴 삭제
   * @param {number} favoriteSn
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public deleteFavoriteMenu(favoriteSn: number, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .deleteFavoriteMenu(favoriteSn, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 회원 탈퇴
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public deleteMember(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .deleteMember(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 주문을 삭제합니다.
   * @summary 주문 삭제
   * @param {number} roomSn
   * @param {number} orderSn
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public deleteOrder(roomSn: number, orderSn: number, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .deleteOrder(roomSn, orderSn, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 방 삭제
   * @param {number} roomSn
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public deleteRoom(roomSn: number, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .deleteRoom(roomSn, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 방 입장
   * @param {number} roomSn
   * @param {RoomRequestEnterRoom} roomRequestEnterRoom
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public enterRoom(roomSn: number, roomRequestEnterRoom: RoomRequestEnterRoom, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .enterRoom(roomSn, roomRequestEnterRoom, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 방 나가기
   * @param {number} roomSn
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public exitRoom(roomSn: number, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .exitRoom(roomSn, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 즐겨찾기 메뉴 조회
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public findFavoriteMenu(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .findFavoriteMenu(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 회원정보 조회
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public findMemberInfo(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .findMemberInfo(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 입장한 방 목록 조회
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getEnteredRoomList(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .getEnteredRoomList(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 패배자 조회
   * @param {Array<number>} memberSns
   * @param {'PINBALL'} gameType
   * @param {string} startDate
   * @param {string} endDate
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getLooserData(memberSns: Array<number>, gameType: 'PINBALL', startDate: string, endDate: string, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .getLooserData(memberSns, gameType, startDate, endDate, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 메뉴 정보를 조회합니다.
   * @summary 메뉴 정보 조회
   * @param {string} menuCode
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getMenuInfo(menuCode: string, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .getMenuInfo(menuCode, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 메뉴 목록을 조회합니다.
   * @summary 메뉴 목록 조회
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getMenuList(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .getMenuList(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 방 정보 조회
   * @param {number} roomSn
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getRoomInfo(roomSn: number, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .getRoomInfo(roomSn, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 방 목록 조회
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getRoomList(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .getRoomList(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 로그인
   * @param {MemberRequestLogin} memberRequestLogin
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public login(memberRequestLogin: MemberRequestLogin, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .login(memberRequestLogin, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 주문을 취합하여 음료를 주문합니다.
   * @summary 음료 주문
   * @param {PaymentRequestPay} paymentRequestPay
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public payOrder(paymentRequestPay: PaymentRequestPay, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .payOrder(paymentRequestPay, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 패배자 등록
   * @param {DashBoardRequestPost} dashBoardRequestPost
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public postLooser(dashBoardRequestPost: DashBoardRequestPost, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .postLooser(dashBoardRequestPost, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 회원가입
   * @param {MemberRequestSignup} memberRequestSignup
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public signup(memberRequestSignup: MemberRequestSignup, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .signup(memberRequestSignup, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 테스트
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public test(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .test(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary uchef 인증
   * @param {MemberRequestUcehfAuth} memberRequestUcehfAuth
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public uChefAuth(memberRequestUcehfAuth: MemberRequestUcehfAuth, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .uChefAuth(memberRequestUcehfAuth, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary u chef 로그인 테스트
   * @param {string} phone
   * @param {string} securityId
   * @param {string} password
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public uChefLoginTest(phone: string, securityId: string, password: string, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .uChefLoginTest(phone, securityId, password, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 닉네임 변경
   * @param {MemberRequestNickname} memberRequestNickname
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public updateNickname(memberRequestNickname: MemberRequestNickname, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .updateNickname(memberRequestNickname, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 주문 수량을 변경합니다.
   * @summary 주문 수량 변경
   * @param {number} orderSn
   * @param {OrderRequestUpdateQuantity} orderRequestUpdateQuantity
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public updateOrderQuantity(orderSn: number, orderRequestUpdateQuantity: OrderRequestUpdateQuantity, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .updateOrderQuantity(orderSn, orderRequestUpdateQuantity, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 비밀번호 변경
   * @param {MemberRequestPassword} memberRequestPassword
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public updatePassword(memberRequestPassword: MemberRequestPassword, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .updatePassword(memberRequestPassword, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 방 정보 수정
   * @param {RoomRequestUpdateRoom} roomRequestUpdateRoom
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public updateRoom(roomRequestUpdateRoom: RoomRequestUpdateRoom, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .updateRoom(roomRequestUpdateRoom, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary username 중복검사
   * @param {string} username
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public usernameCheck(username: string, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .usernameCheck(username, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
