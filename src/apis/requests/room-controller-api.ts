/* tslint:disable */
/* eslint-disable */
/**
 * Mcafe V2 API
 * Mcafe V2 API 명세서
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { RoomRequestCreate } from '../models';
// @ts-ignore
import { RoomRequestEnterRoom } from '../models';
// @ts-ignore
import { RoomResponseCreate } from '../models';
// @ts-ignore
import { RoomResponseGetRoomInfo } from '../models';
// @ts-ignore
import { RoomResponseGetRoomList } from '../models';
/**
 * RoomControllerApi - axios parameter creator
 * @export
 */
export const RoomControllerApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 방 생성
     * @param {RoomRequestCreate} roomRequestCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRoom: async (roomRequestCreate: RoomRequestCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'roomRequestCreate' is not null or undefined
      assertParamExists('createRoom', 'roomRequestCreate', roomRequestCreate);
      const localVarPath = `/room`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(roomRequestCreate, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 방 삭제
     * @param {number} roomSn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRoom: async (roomSn: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'roomSn' is not null or undefined
      assertParamExists('deleteRoom', 'roomSn', roomSn);
      const localVarPath = `/room/{roomSn}`.replace(`{${'roomSn'}}`, encodeURIComponent(String(roomSn)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 방 입장
     * @param {number} roomSn
     * @param {RoomRequestEnterRoom} roomRequestEnterRoom
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    enterRoom: async (
      roomSn: number,
      roomRequestEnterRoom: RoomRequestEnterRoom,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'roomSn' is not null or undefined
      assertParamExists('enterRoom', 'roomSn', roomSn);
      // verify required parameter 'roomRequestEnterRoom' is not null or undefined
      assertParamExists('enterRoom', 'roomRequestEnterRoom', roomRequestEnterRoom);
      const localVarPath = `/room/enter/{roomSn}`.replace(`{${'roomSn'}}`, encodeURIComponent(String(roomSn)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(roomRequestEnterRoom, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 방 나가기
     * @param {number} roomSn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exitRoom: async (roomSn: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'roomSn' is not null or undefined
      assertParamExists('exitRoom', 'roomSn', roomSn);
      const localVarPath = `/room/exit/{roomSn}`.replace(`{${'roomSn'}}`, encodeURIComponent(String(roomSn)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 입장한 방 목록 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEnteredRoomList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/room/entered`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 방 정보 조회
     * @param {number} roomSn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRoomInfo: async (roomSn: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'roomSn' is not null or undefined
      assertParamExists('getRoomInfo', 'roomSn', roomSn);
      const localVarPath = `/room/{roomSn}`.replace(`{${'roomSn'}}`, encodeURIComponent(String(roomSn)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 방 목록 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRoomList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/room`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * RoomControllerApi - functional programming interface
 * @export
 */
export const RoomControllerApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = RoomControllerApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 방 생성
     * @param {RoomRequestCreate} roomRequestCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createRoom(
      roomRequestCreate: RoomRequestCreate,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoomResponseCreate>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createRoom(roomRequestCreate, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 방 삭제
     * @param {number} roomSn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteRoom(
      roomSn: number,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRoom(roomSn, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 방 입장
     * @param {number} roomSn
     * @param {RoomRequestEnterRoom} roomRequestEnterRoom
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async enterRoom(
      roomSn: number,
      roomRequestEnterRoom: RoomRequestEnterRoom,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.enterRoom(roomSn, roomRequestEnterRoom, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 방 나가기
     * @param {number} roomSn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async exitRoom(
      roomSn: number,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.exitRoom(roomSn, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 입장한 방 목록 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getEnteredRoomList(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoomResponseGetRoomList>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getEnteredRoomList(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 방 정보 조회
     * @param {number} roomSn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getRoomInfo(
      roomSn: number,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoomResponseGetRoomInfo>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getRoomInfo(roomSn, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 방 목록 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getRoomList(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoomResponseGetRoomList>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getRoomList(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * RoomControllerApi - factory interface
 * @export
 */
export const RoomControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = RoomControllerApiFp(configuration);
  return {
    /**
     *
     * @summary 방 생성
     * @param {RoomRequestCreate} roomRequestCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRoom(roomRequestCreate: RoomRequestCreate, options?: any): AxiosPromise<RoomResponseCreate> {
      return localVarFp.createRoom(roomRequestCreate, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 방 삭제
     * @param {number} roomSn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRoom(roomSn: number, options?: any): AxiosPromise<boolean> {
      return localVarFp.deleteRoom(roomSn, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 방 입장
     * @param {number} roomSn
     * @param {RoomRequestEnterRoom} roomRequestEnterRoom
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    enterRoom(roomSn: number, roomRequestEnterRoom: RoomRequestEnterRoom, options?: any): AxiosPromise<boolean> {
      return localVarFp.enterRoom(roomSn, roomRequestEnterRoom, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 방 나가기
     * @param {number} roomSn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exitRoom(roomSn: number, options?: any): AxiosPromise<boolean> {
      return localVarFp.exitRoom(roomSn, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 입장한 방 목록 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEnteredRoomList(options?: any): AxiosPromise<RoomResponseGetRoomList> {
      return localVarFp.getEnteredRoomList(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 방 정보 조회
     * @param {number} roomSn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRoomInfo(roomSn: number, options?: any): AxiosPromise<RoomResponseGetRoomInfo> {
      return localVarFp.getRoomInfo(roomSn, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 방 목록 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRoomList(options?: any): AxiosPromise<RoomResponseGetRoomList> {
      return localVarFp.getRoomList(options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * RoomControllerApi - object-oriented interface
 * @export
 * @class RoomControllerApi
 * @extends {BaseAPI}
 */
export class RoomControllerApi extends BaseAPI {
  /**
   *
   * @summary 방 생성
   * @param {RoomRequestCreate} roomRequestCreate
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoomControllerApi
   */
  public createRoom(roomRequestCreate: RoomRequestCreate, options?: AxiosRequestConfig) {
    return RoomControllerApiFp(this.configuration)
      .createRoom(roomRequestCreate, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 방 삭제
   * @param {number} roomSn
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoomControllerApi
   */
  public deleteRoom(roomSn: number, options?: AxiosRequestConfig) {
    return RoomControllerApiFp(this.configuration)
      .deleteRoom(roomSn, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 방 입장
   * @param {number} roomSn
   * @param {RoomRequestEnterRoom} roomRequestEnterRoom
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoomControllerApi
   */
  public enterRoom(roomSn: number, roomRequestEnterRoom: RoomRequestEnterRoom, options?: AxiosRequestConfig) {
    return RoomControllerApiFp(this.configuration)
      .enterRoom(roomSn, roomRequestEnterRoom, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 방 나가기
   * @param {number} roomSn
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoomControllerApi
   */
  public exitRoom(roomSn: number, options?: AxiosRequestConfig) {
    return RoomControllerApiFp(this.configuration)
      .exitRoom(roomSn, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 입장한 방 목록 조회
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoomControllerApi
   */
  public getEnteredRoomList(options?: AxiosRequestConfig) {
    return RoomControllerApiFp(this.configuration)
      .getEnteredRoomList(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 방 정보 조회
   * @param {number} roomSn
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoomControllerApi
   */
  public getRoomInfo(roomSn: number, options?: AxiosRequestConfig) {
    return RoomControllerApiFp(this.configuration)
      .getRoomInfo(roomSn, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 방 목록 조회
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoomControllerApi
   */
  public getRoomList(options?: AxiosRequestConfig) {
    return RoomControllerApiFp(this.configuration)
      .getRoomList(options)
      .then((request) => request(this.axios, this.basePath));
  }
}
